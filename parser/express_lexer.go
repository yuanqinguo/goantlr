// Code generated from express.g4 by ANTLR 4.10.1. DO NOT EDIT.

package parser

import (
	"fmt"
	"sync"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type expressLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var expresslexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	channelNames           []string
	modeNames              []string
	literalNames           []string
	symbolicNames          []string
	ruleNames              []string
	predictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func expresslexerLexerInit() {
	staticData := &expresslexerLexerStaticData
	staticData.channelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.modeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.literalNames = []string{
		"", "", "", "", "", "", "", "", "'IF'", "'IFS'", "'ELSE'", "'AND'",
		"'OR'", "", "'CONCATSTR'", "'FINDSTR'", "'MAX'", "'MIN'", "'SUM'", "'AVERAGE'",
		"'ROUND'", "'+'", "'-'", "", "", "'%'", "'D'", "'M'", "'Y'", "'TODAY'",
		"'DATE'", "'DATEDIF'", "'DATEADD'", "'HELLO_WORLD'",
	}
	staticData.symbolicNames = []string{
		"", "WHITE_SPACE", "INTEGER", "TEXT", "FLOAT", "COMMA", "LLIMIT", "RLIMIT",
		"IF", "IFS", "ELSE", "AND", "OR", "COMPARATOR", "CONCATSTRING", "FINDSTRING",
		"MAX", "MIN", "SUM", "AVERAGE", "ROUND", "ADD", "SUB", "MUL", "DIV",
		"MOD", "DoDays", "DoMonths", "DoYears", "TODAY", "DATE", "DATEDIF",
		"DATEADD", "Helloworld",
	}
	staticData.ruleNames = []string{
		"WHITE_SPACE", "ESC", "ExponentPart", "Digit", "INTEGER", "TEXT", "FLOAT",
		"COMMA", "LLIMIT", "RLIMIT", "IF", "IFS", "ELSE", "AND", "OR", "COMPARATOR",
		"CONCATSTRING", "FINDSTRING", "MAX", "MIN", "SUM", "AVERAGE", "ROUND",
		"ADD", "SUB", "MUL", "DIV", "MOD", "DoDays", "DoMonths", "DoYears",
		"TODAY", "DATE", "DATEDIF", "DATEADD", "Helloworld",
	}
	staticData.predictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 33, 321, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 1, 0,
		4, 0, 75, 8, 0, 11, 0, 12, 0, 76, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 3,
		1, 85, 8, 1, 1, 2, 1, 2, 3, 2, 89, 8, 2, 1, 2, 4, 2, 92, 8, 2, 11, 2, 12,
		2, 93, 1, 3, 1, 3, 1, 4, 4, 4, 99, 8, 4, 11, 4, 12, 4, 100, 1, 5, 1, 5,
		1, 5, 5, 5, 106, 8, 5, 10, 5, 12, 5, 109, 9, 5, 1, 5, 1, 5, 1, 5, 1, 5,
		5, 5, 115, 8, 5, 10, 5, 12, 5, 118, 9, 5, 1, 5, 1, 5, 1, 5, 1, 5, 5, 5,
		124, 8, 5, 10, 5, 12, 5, 127, 9, 5, 1, 5, 1, 5, 1, 5, 1, 5, 5, 5, 133,
		8, 5, 10, 5, 12, 5, 136, 9, 5, 1, 5, 1, 5, 1, 5, 1, 5, 5, 5, 142, 8, 5,
		10, 5, 12, 5, 145, 9, 5, 1, 5, 3, 5, 148, 8, 5, 1, 6, 4, 6, 151, 8, 6,
		11, 6, 12, 6, 152, 1, 6, 1, 6, 5, 6, 157, 8, 6, 10, 6, 12, 6, 160, 9, 6,
		1, 6, 3, 6, 163, 8, 6, 1, 6, 1, 6, 4, 6, 167, 8, 6, 11, 6, 12, 6, 168,
		1, 6, 3, 6, 172, 8, 6, 1, 6, 4, 6, 175, 8, 6, 11, 6, 12, 6, 176, 1, 6,
		1, 6, 3, 6, 181, 8, 6, 1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 10, 1, 10,
		1, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1,
		13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 15,
		1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 221,
		8, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1,
		16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18,
		1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1,
		21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22,
		1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 24, 1, 24, 1, 25, 1, 25, 1, 26, 1,
		26, 1, 27, 1, 27, 1, 28, 1, 28, 1, 29, 1, 29, 1, 30, 1, 30, 1, 31, 1, 31,
		1, 31, 1, 31, 1, 31, 1, 31, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 33, 1,
		33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 1, 34,
		1, 34, 1, 34, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1,
		35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 5, 107, 116, 125, 134, 143, 0, 36,
		1, 1, 3, 0, 5, 0, 7, 0, 9, 2, 11, 3, 13, 4, 15, 5, 17, 6, 19, 7, 21, 8,
		23, 9, 25, 10, 27, 11, 29, 12, 31, 13, 33, 14, 35, 15, 37, 16, 39, 17,
		41, 18, 43, 19, 45, 20, 47, 21, 49, 22, 51, 23, 53, 24, 55, 25, 57, 26,
		59, 27, 61, 28, 63, 29, 65, 30, 67, 31, 69, 32, 71, 33, 1, 0, 10, 3, 0,
		9, 10, 13, 13, 32, 32, 2, 0, 69, 69, 101, 101, 2, 0, 43, 43, 45, 45, 1,
		0, 48, 57, 2, 0, 44, 44, 65292, 65292, 2, 0, 40, 40, 65288, 65288, 2, 0,
		41, 41, 65289, 65289, 3, 0, 60, 62, 8800, 8800, 65308, 65310, 2, 0, 42,
		42, 215, 215, 2, 0, 47, 47, 247, 247, 351, 0, 1, 1, 0, 0, 0, 0, 9, 1, 0,
		0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1,
		0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25,
		1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0,
		33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0,
		0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0,
		0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0,
		0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1,
		0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71,
		1, 0, 0, 0, 1, 74, 1, 0, 0, 0, 3, 84, 1, 0, 0, 0, 5, 86, 1, 0, 0, 0, 7,
		95, 1, 0, 0, 0, 9, 98, 1, 0, 0, 0, 11, 147, 1, 0, 0, 0, 13, 180, 1, 0,
		0, 0, 15, 182, 1, 0, 0, 0, 17, 184, 1, 0, 0, 0, 19, 186, 1, 0, 0, 0, 21,
		188, 1, 0, 0, 0, 23, 191, 1, 0, 0, 0, 25, 195, 1, 0, 0, 0, 27, 200, 1,
		0, 0, 0, 29, 204, 1, 0, 0, 0, 31, 220, 1, 0, 0, 0, 33, 222, 1, 0, 0, 0,
		35, 232, 1, 0, 0, 0, 37, 240, 1, 0, 0, 0, 39, 244, 1, 0, 0, 0, 41, 248,
		1, 0, 0, 0, 43, 252, 1, 0, 0, 0, 45, 260, 1, 0, 0, 0, 47, 266, 1, 0, 0,
		0, 49, 268, 1, 0, 0, 0, 51, 270, 1, 0, 0, 0, 53, 272, 1, 0, 0, 0, 55, 274,
		1, 0, 0, 0, 57, 276, 1, 0, 0, 0, 59, 278, 1, 0, 0, 0, 61, 280, 1, 0, 0,
		0, 63, 282, 1, 0, 0, 0, 65, 288, 1, 0, 0, 0, 67, 293, 1, 0, 0, 0, 69, 301,
		1, 0, 0, 0, 71, 309, 1, 0, 0, 0, 73, 75, 7, 0, 0, 0, 74, 73, 1, 0, 0, 0,
		75, 76, 1, 0, 0, 0, 76, 74, 1, 0, 0, 0, 76, 77, 1, 0, 0, 0, 77, 78, 1,
		0, 0, 0, 78, 79, 6, 0, 0, 0, 79, 2, 1, 0, 0, 0, 80, 81, 5, 92, 0, 0, 81,
		85, 5, 34, 0, 0, 82, 83, 5, 92, 0, 0, 83, 85, 5, 92, 0, 0, 84, 80, 1, 0,
		0, 0, 84, 82, 1, 0, 0, 0, 85, 4, 1, 0, 0, 0, 86, 88, 7, 1, 0, 0, 87, 89,
		7, 2, 0, 0, 88, 87, 1, 0, 0, 0, 88, 89, 1, 0, 0, 0, 89, 91, 1, 0, 0, 0,
		90, 92, 3, 7, 3, 0, 91, 90, 1, 0, 0, 0, 92, 93, 1, 0, 0, 0, 93, 91, 1,
		0, 0, 0, 93, 94, 1, 0, 0, 0, 94, 6, 1, 0, 0, 0, 95, 96, 7, 3, 0, 0, 96,
		8, 1, 0, 0, 0, 97, 99, 3, 7, 3, 0, 98, 97, 1, 0, 0, 0, 99, 100, 1, 0, 0,
		0, 100, 98, 1, 0, 0, 0, 100, 101, 1, 0, 0, 0, 101, 10, 1, 0, 0, 0, 102,
		107, 5, 35, 0, 0, 103, 106, 3, 3, 1, 0, 104, 106, 9, 0, 0, 0, 105, 103,
		1, 0, 0, 0, 105, 104, 1, 0, 0, 0, 106, 109, 1, 0, 0, 0, 107, 108, 1, 0,
		0, 0, 107, 105, 1, 0, 0, 0, 108, 110, 1, 0, 0, 0, 109, 107, 1, 0, 0, 0,
		110, 148, 5, 35, 0, 0, 111, 116, 5, 39, 0, 0, 112, 115, 3, 3, 1, 0, 113,
		115, 9, 0, 0, 0, 114, 112, 1, 0, 0, 0, 114, 113, 1, 0, 0, 0, 115, 118,
		1, 0, 0, 0, 116, 117, 1, 0, 0, 0, 116, 114, 1, 0, 0, 0, 117, 119, 1, 0,
		0, 0, 118, 116, 1, 0, 0, 0, 119, 148, 5, 39, 0, 0, 120, 125, 5, 8217, 0,
		0, 121, 124, 3, 3, 1, 0, 122, 124, 9, 0, 0, 0, 123, 121, 1, 0, 0, 0, 123,
		122, 1, 0, 0, 0, 124, 127, 1, 0, 0, 0, 125, 126, 1, 0, 0, 0, 125, 123,
		1, 0, 0, 0, 126, 128, 1, 0, 0, 0, 127, 125, 1, 0, 0, 0, 128, 148, 5, 8216,
		0, 0, 129, 134, 5, 34, 0, 0, 130, 133, 3, 3, 1, 0, 131, 133, 9, 0, 0, 0,
		132, 130, 1, 0, 0, 0, 132, 131, 1, 0, 0, 0, 133, 136, 1, 0, 0, 0, 134,
		135, 1, 0, 0, 0, 134, 132, 1, 0, 0, 0, 135, 137, 1, 0, 0, 0, 136, 134,
		1, 0, 0, 0, 137, 148, 5, 34, 0, 0, 138, 143, 5, 8220, 0, 0, 139, 142, 3,
		3, 1, 0, 140, 142, 9, 0, 0, 0, 141, 139, 1, 0, 0, 0, 141, 140, 1, 0, 0,
		0, 142, 145, 1, 0, 0, 0, 143, 144, 1, 0, 0, 0, 143, 141, 1, 0, 0, 0, 144,
		146, 1, 0, 0, 0, 145, 143, 1, 0, 0, 0, 146, 148, 5, 8220, 0, 0, 147, 102,
		1, 0, 0, 0, 147, 111, 1, 0, 0, 0, 147, 120, 1, 0, 0, 0, 147, 129, 1, 0,
		0, 0, 147, 138, 1, 0, 0, 0, 148, 12, 1, 0, 0, 0, 149, 151, 3, 7, 3, 0,
		150, 149, 1, 0, 0, 0, 151, 152, 1, 0, 0, 0, 152, 150, 1, 0, 0, 0, 152,
		153, 1, 0, 0, 0, 153, 154, 1, 0, 0, 0, 154, 158, 5, 46, 0, 0, 155, 157,
		3, 7, 3, 0, 156, 155, 1, 0, 0, 0, 157, 160, 1, 0, 0, 0, 158, 156, 1, 0,
		0, 0, 158, 159, 1, 0, 0, 0, 159, 162, 1, 0, 0, 0, 160, 158, 1, 0, 0, 0,
		161, 163, 3, 5, 2, 0, 162, 161, 1, 0, 0, 0, 162, 163, 1, 0, 0, 0, 163,
		181, 1, 0, 0, 0, 164, 166, 5, 46, 0, 0, 165, 167, 3, 7, 3, 0, 166, 165,
		1, 0, 0, 0, 167, 168, 1, 0, 0, 0, 168, 166, 1, 0, 0, 0, 168, 169, 1, 0,
		0, 0, 169, 171, 1, 0, 0, 0, 170, 172, 3, 5, 2, 0, 171, 170, 1, 0, 0, 0,
		171, 172, 1, 0, 0, 0, 172, 181, 1, 0, 0, 0, 173, 175, 3, 7, 3, 0, 174,
		173, 1, 0, 0, 0, 175, 176, 1, 0, 0, 0, 176, 174, 1, 0, 0, 0, 176, 177,
		1, 0, 0, 0, 177, 178, 1, 0, 0, 0, 178, 179, 3, 5, 2, 0, 179, 181, 1, 0,
		0, 0, 180, 150, 1, 0, 0, 0, 180, 164, 1, 0, 0, 0, 180, 174, 1, 0, 0, 0,
		181, 14, 1, 0, 0, 0, 182, 183, 7, 4, 0, 0, 183, 16, 1, 0, 0, 0, 184, 185,
		7, 5, 0, 0, 185, 18, 1, 0, 0, 0, 186, 187, 7, 6, 0, 0, 187, 20, 1, 0, 0,
		0, 188, 189, 5, 73, 0, 0, 189, 190, 5, 70, 0, 0, 190, 22, 1, 0, 0, 0, 191,
		192, 5, 73, 0, 0, 192, 193, 5, 70, 0, 0, 193, 194, 5, 83, 0, 0, 194, 24,
		1, 0, 0, 0, 195, 196, 5, 69, 0, 0, 196, 197, 5, 76, 0, 0, 197, 198, 5,
		83, 0, 0, 198, 199, 5, 69, 0, 0, 199, 26, 1, 0, 0, 0, 200, 201, 5, 65,
		0, 0, 201, 202, 5, 78, 0, 0, 202, 203, 5, 68, 0, 0, 203, 28, 1, 0, 0, 0,
		204, 205, 5, 79, 0, 0, 205, 206, 5, 82, 0, 0, 206, 30, 1, 0, 0, 0, 207,
		221, 7, 7, 0, 0, 208, 209, 5, 33, 0, 0, 209, 221, 5, 61, 0, 0, 210, 211,
		5, 62, 0, 0, 211, 221, 5, 61, 0, 0, 212, 221, 5, 8805, 0, 0, 213, 214,
		5, 65310, 0, 0, 214, 221, 5, 65309, 0, 0, 215, 216, 5, 65308, 0, 0, 216,
		221, 5, 65309, 0, 0, 217, 221, 5, 8804, 0, 0, 218, 219, 5, 60, 0, 0, 219,
		221, 5, 61, 0, 0, 220, 207, 1, 0, 0, 0, 220, 208, 1, 0, 0, 0, 220, 210,
		1, 0, 0, 0, 220, 212, 1, 0, 0, 0, 220, 213, 1, 0, 0, 0, 220, 215, 1, 0,
		0, 0, 220, 217, 1, 0, 0, 0, 220, 218, 1, 0, 0, 0, 221, 32, 1, 0, 0, 0,
		222, 223, 5, 67, 0, 0, 223, 224, 5, 79, 0, 0, 224, 225, 5, 78, 0, 0, 225,
		226, 5, 67, 0, 0, 226, 227, 5, 65, 0, 0, 227, 228, 5, 84, 0, 0, 228, 229,
		5, 83, 0, 0, 229, 230, 5, 84, 0, 0, 230, 231, 5, 82, 0, 0, 231, 34, 1,
		0, 0, 0, 232, 233, 5, 70, 0, 0, 233, 234, 5, 73, 0, 0, 234, 235, 5, 78,
		0, 0, 235, 236, 5, 68, 0, 0, 236, 237, 5, 83, 0, 0, 237, 238, 5, 84, 0,
		0, 238, 239, 5, 82, 0, 0, 239, 36, 1, 0, 0, 0, 240, 241, 5, 77, 0, 0, 241,
		242, 5, 65, 0, 0, 242, 243, 5, 88, 0, 0, 243, 38, 1, 0, 0, 0, 244, 245,
		5, 77, 0, 0, 245, 246, 5, 73, 0, 0, 246, 247, 5, 78, 0, 0, 247, 40, 1,
		0, 0, 0, 248, 249, 5, 83, 0, 0, 249, 250, 5, 85, 0, 0, 250, 251, 5, 77,
		0, 0, 251, 42, 1, 0, 0, 0, 252, 253, 5, 65, 0, 0, 253, 254, 5, 86, 0, 0,
		254, 255, 5, 69, 0, 0, 255, 256, 5, 82, 0, 0, 256, 257, 5, 65, 0, 0, 257,
		258, 5, 71, 0, 0, 258, 259, 5, 69, 0, 0, 259, 44, 1, 0, 0, 0, 260, 261,
		5, 82, 0, 0, 261, 262, 5, 79, 0, 0, 262, 263, 5, 85, 0, 0, 263, 264, 5,
		78, 0, 0, 264, 265, 5, 68, 0, 0, 265, 46, 1, 0, 0, 0, 266, 267, 5, 43,
		0, 0, 267, 48, 1, 0, 0, 0, 268, 269, 5, 45, 0, 0, 269, 50, 1, 0, 0, 0,
		270, 271, 7, 8, 0, 0, 271, 52, 1, 0, 0, 0, 272, 273, 7, 9, 0, 0, 273, 54,
		1, 0, 0, 0, 274, 275, 5, 37, 0, 0, 275, 56, 1, 0, 0, 0, 276, 277, 5, 68,
		0, 0, 277, 58, 1, 0, 0, 0, 278, 279, 5, 77, 0, 0, 279, 60, 1, 0, 0, 0,
		280, 281, 5, 89, 0, 0, 281, 62, 1, 0, 0, 0, 282, 283, 5, 84, 0, 0, 283,
		284, 5, 79, 0, 0, 284, 285, 5, 68, 0, 0, 285, 286, 5, 65, 0, 0, 286, 287,
		5, 89, 0, 0, 287, 64, 1, 0, 0, 0, 288, 289, 5, 68, 0, 0, 289, 290, 5, 65,
		0, 0, 290, 291, 5, 84, 0, 0, 291, 292, 5, 69, 0, 0, 292, 66, 1, 0, 0, 0,
		293, 294, 5, 68, 0, 0, 294, 295, 5, 65, 0, 0, 295, 296, 5, 84, 0, 0, 296,
		297, 5, 69, 0, 0, 297, 298, 5, 68, 0, 0, 298, 299, 5, 73, 0, 0, 299, 300,
		5, 70, 0, 0, 300, 68, 1, 0, 0, 0, 301, 302, 5, 68, 0, 0, 302, 303, 5, 65,
		0, 0, 303, 304, 5, 84, 0, 0, 304, 305, 5, 69, 0, 0, 305, 306, 5, 65, 0,
		0, 306, 307, 5, 68, 0, 0, 307, 308, 5, 68, 0, 0, 308, 70, 1, 0, 0, 0, 309,
		310, 5, 72, 0, 0, 310, 311, 5, 69, 0, 0, 311, 312, 5, 76, 0, 0, 312, 313,
		5, 76, 0, 0, 313, 314, 5, 79, 0, 0, 314, 315, 5, 95, 0, 0, 315, 316, 5,
		87, 0, 0, 316, 317, 5, 79, 0, 0, 317, 318, 5, 82, 0, 0, 318, 319, 5, 76,
		0, 0, 319, 320, 5, 68, 0, 0, 320, 72, 1, 0, 0, 0, 25, 0, 76, 84, 88, 93,
		100, 105, 107, 114, 116, 123, 125, 132, 134, 141, 143, 147, 152, 158, 162,
		168, 171, 176, 180, 220, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// expressLexerInit initializes any static state used to implement expressLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewexpressLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func ExpressLexerInit() {
	staticData := &expresslexerLexerStaticData
	staticData.once.Do(expresslexerLexerInit)
}

// NewexpressLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewexpressLexer(input antlr.CharStream) *expressLexer {
	ExpressLexerInit()
	l := new(expressLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &expresslexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	l.channelNames = staticData.channelNames
	l.modeNames = staticData.modeNames
	l.RuleNames = staticData.ruleNames
	l.LiteralNames = staticData.literalNames
	l.SymbolicNames = staticData.symbolicNames
	l.GrammarFileName = "express.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// expressLexer tokens.
const (
	expressLexerWHITE_SPACE  = 1
	expressLexerINTEGER      = 2
	expressLexerTEXT         = 3
	expressLexerFLOAT        = 4
	expressLexerCOMMA        = 5
	expressLexerLLIMIT       = 6
	expressLexerRLIMIT       = 7
	expressLexerIF           = 8
	expressLexerIFS          = 9
	expressLexerELSE         = 10
	expressLexerAND          = 11
	expressLexerOR           = 12
	expressLexerCOMPARATOR   = 13
	expressLexerCONCATSTRING = 14
	expressLexerFINDSTRING   = 15
	expressLexerMAX          = 16
	expressLexerMIN          = 17
	expressLexerSUM          = 18
	expressLexerAVERAGE      = 19
	expressLexerROUND        = 20
	expressLexerADD          = 21
	expressLexerSUB          = 22
	expressLexerMUL          = 23
	expressLexerDIV          = 24
	expressLexerMOD          = 25
	expressLexerDoDays       = 26
	expressLexerDoMonths     = 27
	expressLexerDoYears      = 28
	expressLexerTODAY        = 29
	expressLexerDATE         = 30
	expressLexerDATEDIF      = 31
	expressLexerDATEADD      = 32
	expressLexerHelloworld   = 33
)
